// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nombre    String
  rol       String   // SYNC_MANAGER, LEGAL, ADMIN, EXECUTIVE
  permisos  String?  // JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  oportunidadesCreadas    Oportunidad[] @relation("SyncManager")
  oportunidadesLegales    Oportunidad[] @relation("Legal")
  oportunidadesAdmin      Oportunidad[] @relation("Admin")
  actividades             Actividad[]
  notificaciones          Notificacion[]

  @@map("usuarios")
}

model Cliente {
  id        String   @id @default(cuid())
  nombre    String
  tipo      String   // PLATAFORMA, MARCA, PRODUCTORA
  contactos String?  // JSON string
  metadata  String?  // JSON string
  createdAt DateTime @default(now())

  // Relations
  oportunidades Oportunidad[]

  @@map("clientes")
}

model Obra {
  id                    String   @id @default(cuid())
  nombre                String
  iswc                  String?
  porcentaje_control_dp Float
  porcentaje_share_dp   Float
  compositores          String?  // JSON string
  territorio            String?
  metadata              String?  // JSON string
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  // Relations
  fonogramas            Fonograma[]
  oportunidadCanciones  OportunidadCancion[]

  @@map("obras")
}

model Fonograma {
  id                String   @id @default(cuid())
  obraId            String
  nombre            String
  isrc              String?
  porcentaje_dp     Float
  artista_principal String
  featured_artists  String?  // JSON string
  sello             String?
  anio_lanzamiento  Int?
  metadata          String?  // JSON string
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  // Relations
  obra                    Obra                    @relation(fields: [obraId], references: [id], onDelete: Cascade)
  oportunidadCanciones    OportunidadCancion[]

  @@map("fonogramas")
}

model Oportunidad {
  id              String   @id @default(cuid())
  codigo          String   @unique // OPP-2025-0001
  tipo_flow       String   // OUTBOUND, INBOUND
  estado          String   // PITCHING, NEGOTIATION, APPROVAL, LEGAL, SIGNED, INVOICED, PAID, REJECTED
  clienteId       String
  proyecto        String
  tipo_proyecto   String   // SERIE, PELICULA, PUBLICIDAD, VIDEOJUEGO
  territorio      String?
  duracion_licencia String?
  tipo_uso        String?
  budget          Float?
  mfn             Boolean  @default(false)
  deadline        DateTime?
  sync_manager_id String
  legal_id        String?
  admin_id        String?
  metadata        String?  // JSON string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  // Relations
  cliente               Cliente                 @relation(fields: [clienteId], references: [id])
  syncManager           User                    @relation("SyncManager", fields: [sync_manager_id], references: [id])
  legal                 User?                   @relation("Legal", fields: [legal_id], references: [id])
  admin                 User?                   @relation("Admin", fields: [admin_id], references: [id])
  canciones             OportunidadCancion[]
  actividades           Actividad[]
  documentos            Documento[]

  @@map("oportunidades")
}

model OportunidadCancion {
  id              String   @id @default(cuid())
  oportunidadId   String
  obraId          String
  fonogramaId     String?
  budget_cancion  Float?
  nps_publishing  Float?
  nps_recording   Float?
  nps_total       Float?
  aprobaciones    String?  // JSON string
  createdAt       DateTime @default(now())

  // Relations
  oportunidad Oportunidad @relation(fields: [oportunidadId], references: [id], onDelete: Cascade)
  obra       Obra        @relation(fields: [obraId], references: [id])
  fonograma  Fonograma? @relation(fields: [fonogramaId], references: [id])

  @@map("oportunidad_canciones")
}

model Actividad {
  id              String   @id @default(cuid())
  oportunidadId   String
  usuarioId       String
  tipo_actividad  String
  descripcion     String?
  metadata        String?  // JSON string
  createdAt       DateTime @default(now())

  // Relations
  oportunidad Oportunidad @relation(fields: [oportunidadId], references: [id], onDelete: Cascade)
  usuario     User        @relation(fields: [usuarioId], references: [id])

  @@map("actividad")
}

model Documento {
  id              String   @id @default(cuid())
  oportunidadId   String
  tipo            String   // CONTRATO, FACTURA, APROBACION, ONE_SHEET
  url             String?
  metadata        String?  // JSON string
  createdAt       DateTime @default(now())

  // Relations
  oportunidad Oportunidad @relation(fields: [oportunidadId], references: [id], onDelete: Cascade)

  @@map("documentos")
}

model Notificacion {
  id        String   @id @default(cuid())
  usuarioId String
  tipo      String
  titulo    String
  mensaje   String?
  leida     Boolean  @default(false)
  metadata  String?  // JSON string
  createdAt DateTime @default(now())

  // Relations
  usuario User @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("notificaciones")
}
